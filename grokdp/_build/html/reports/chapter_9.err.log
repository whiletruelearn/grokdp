Traceback (most recent call last):
  File "/Users/whiletruelearn/miniforge3/envs/py310/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/whiletruelearn/miniforge3/envs/py310/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/whiletruelearn/miniforge3/envs/py310/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/whiletruelearn/miniforge3/envs/py310/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/Users/whiletruelearn/miniforge3/envs/py310/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/whiletruelearn/miniforge3/envs/py310/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/whiletruelearn/miniforge3/envs/py310/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from itertools import combinations

def traveling_salesman(dist):
    n = len(dist)
    all_sets = []
    for r in range(1, n):
        all_sets.extend(combinations(range(1, n), r))
    
    # Initialize DP table
    dp = {}
    for i in range(1, n):
        dp[(1 << i, i)] = (dist[0][i], 0)
    
    # Iterate over all subsets of cities
    for subset in all_sets:
        mask = 0
        for bit in subset:
            mask |= 1 << bit
        
        for last in subset:
            prev = mask & ~(1 << last)
            dp[(mask, last)] = min(
                (dp[(prev, j)][0] + dist[j][last], j)
                for j in subset if j != last
            )
    
    # Find optimal tour
    mask = (1 << n) - 1
    optimal_tour = min(
        (dp[(mask, i)][0] + dist[i][0], i)
        for i in range(1, n)
    )
    
    return optimal_tour[0]

# Test the function
dist = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

print(f"Shortest tour length: {traveling_salesman(dist)}")
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Input [0;32mIn [2][0m, in [0;36m<cell line: 44>[0;34m()[0m
[1;32m     36[0m [38;5;66;03m# Test the function[39;00m
[1;32m     37[0m dist [38;5;241m=[39m [
[1;32m     38[0m     [[38;5;241m0[39m, [38;5;241m10[39m, [38;5;241m15[39m, [38;5;241m20[39m],
[1;32m     39[0m     [[38;5;241m10[39m, [38;5;241m0[39m, [38;5;241m35[39m, [38;5;241m25[39m],
[1;32m     40[0m     [[38;5;241m15[39m, [38;5;241m35[39m, [38;5;241m0[39m, [38;5;241m30[39m],
[1;32m     41[0m     [[38;5;241m20[39m, [38;5;241m25[39m, [38;5;241m30[39m, [38;5;241m0[39m]
[1;32m     42[0m ]
[0;32m---> 44[0m [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mShortest tour length: [39m[38;5;132;01m{[39;00mtraveling_salesman(dist)[38;5;132;01m}[39;00m[38;5;124m"[39m)

Input [0;32mIn [2][0m, in [0;36mtraveling_salesman[0;34m(dist)[0m
[1;32m     20[0m     [38;5;28;01mfor[39;00m last [38;5;129;01min[39;00m subset:
[1;32m     21[0m         prev [38;5;241m=[39m mask [38;5;241m&[39m [38;5;241m~[39m([38;5;241m1[39m [38;5;241m<<[39m last)
[0;32m---> 22[0m         dp[(mask, last)] [38;5;241m=[39m [38;5;28;43mmin[39;49m[43m([49m
[1;32m     23[0m [43m            [49m[43m([49m[43mdp[49m[43m[[49m[43m([49m[43mprev[49m[43m,[49m[43m [49m[43mj[49m[43m)[49m[43m][49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[43mdist[49m[43m[[49m[43mj[49m[43m][49m[43m[[49m[43mlast[49m[43m][49m[43m,[49m[43m [49m[43mj[49m[43m)[49m
[1;32m     24[0m [43m            [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mj[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43msubset[49m[43m [49m[38;5;28;43;01mif[39;49;00m[43m [49m[43mj[49m[43m [49m[38;5;241;43m!=[39;49m[43m [49m[43mlast[49m
[1;32m     25[0m [43m        [49m[43m)[49m
[1;32m     27[0m [38;5;66;03m# Find optimal tour[39;00m
[1;32m     28[0m mask [38;5;241m=[39m ([38;5;241m1[39m [38;5;241m<<[39m n) [38;5;241m-[39m [38;5;241m1[39m

[0;31mValueError[0m: min() arg is an empty sequence

